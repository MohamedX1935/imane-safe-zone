# ===============================================
# Script automatis√© pour transformer ImaneSafety PWA en APK Android
# Auteur: ImaneSafety Build Script
# Version: 1.0
# Compatible: Windows 10/11 + PowerShell 5.1+
# ===============================================

param(
    [string]$GmailUser = "mohammedelalaoui532@gmail.com",
    [string]$GmailPassword = "jlld zhqv zfqo jnfs",
    [string]$StopCode = "imane15mohamed",
    [string]$TargetPhone = "+212712695714",
    [switch]$SkipEnvironmentCheck,
    [switch]$OpenAndroidStudio = $true
)

# Configuration
$AppName = "ImaneSafety"
$AppId = "app.lovable.0bf52ad6aa5c422bb500e6271dd0b1c5"
$WebDir = "dist"

# Couleurs pour l'affichage
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Success { Write-ColorOutput Green $args }
function Write-Warning { Write-ColorOutput Yellow $args }
function Write-Error { Write-ColorOutput Red $args }
function Write-Info { Write-ColorOutput Cyan $args }

# Fonction de logging
function Write-Log($Message, $Type = "INFO") {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Type] $Message"
    Write-Output $logMessage
    Add-Content -Path "build-log.txt" -Value $logMessage
}

# Fonction pour ex√©cuter des commandes avec gestion d'erreur
function Invoke-Command($Command, $Description) {
    Write-Info "üîÑ $Description"
    Write-Log "Ex√©cution: $Command" "CMD"
    
    try {
        $result = Invoke-Expression $Command
        if ($LASTEXITCODE -eq 0 -or $LASTEXITCODE -eq $null) {
            Write-Success "‚úÖ $Description - Termin√©"
            Write-Log "$Description - Succ√®s" "SUCCESS"
            return $result
        } else {
            throw "Code de sortie: $LASTEXITCODE"
        }
    } catch {
        Write-Error "‚ùå Erreur lors de: $Description"
        Write-Error "Commande: $Command"
        Write-Error "Erreur: $($_.Exception.Message)"
        Write-Log "$Description - Erreur: $($_.Exception.Message)" "ERROR"
        
        $continue = Read-Host "Continuer malgr√© l'erreur? (y/N)"
        if ($continue -ne "y" -and $continue -ne "Y") {
            exit 1
        }
    }
}

# Banner de d√©marrage
Clear-Host
Write-Success @"
===============================================
üöÄ SCRIPT AUTOMATIS√â IMANESAFETY PWA ‚Üí APK üöÄ
===============================================
App: $AppName
ID: $AppId
Email: $GmailUser
T√©l√©phone: $TargetPhone
===============================================
"@

Write-Log "D√©marrage du script de build APK" "START"

# ===============================================
# PHASE 1: V√âRIFICATION DE L'ENVIRONNEMENT
# ===============================================

Write-Info "üìã PHASE 1: V√©rification de l'environnement"

if (-not $SkipEnvironmentCheck) {
    # V√©rification Node.js
    try {
        $nodeVersion = node --version
        Write-Success "‚úÖ Node.js trouv√©: $nodeVersion"
        Write-Log "Node.js version: $nodeVersion" "CHECK"
    } catch {
        Write-Error "‚ùå Node.js non trouv√©. Veuillez installer Node.js v18+"
        exit 1
    }

    # V√©rification npm
    try {
        $npmVersion = npm --version
        Write-Success "‚úÖ npm trouv√©: $npmVersion"
        Write-Log "npm version: $npmVersion" "CHECK"
    } catch {
        Write-Error "‚ùå npm non trouv√©"
        exit 1
    }

    # V√©rification Java
    try {
        $javaVersion = java -version 2>&1 | Select-String "version"
        Write-Success "‚úÖ Java trouv√©: $javaVersion"
        Write-Log "Java version: $javaVersion" "CHECK"
    } catch {
        Write-Warning "‚ö†Ô∏è Java non trouv√©. Android Studio inclut normalement le JDK"
    }

    # V√©rification Android Studio / SDK
    $androidHome = $env:ANDROID_HOME
    if ($androidHome -and (Test-Path $androidHome)) {
        Write-Success "‚úÖ Android SDK trouv√©: $androidHome"
        Write-Log "Android SDK: $androidHome" "CHECK"
    } else {
        Write-Warning "‚ö†Ô∏è ANDROID_HOME non d√©fini. Assurez-vous qu'Android Studio est install√©"
    }
} else {
    Write-Warning "‚ö†Ô∏è V√©rification de l'environnement ignor√©e"
}

# ===============================================
# PHASE 2: INSTALLATION DES D√âPENDANCES
# ===============================================

Write-Info "üì¶ PHASE 2: Installation des d√©pendances"

# V√©rification du fichier package.json
if (-not (Test-Path "package.json")) {
    Write-Error "‚ùå package.json non trouv√©. Ex√©cutez ce script depuis la racine du projet"
    exit 1
}

# Installation des d√©pendances principales
Invoke-Command "npm install" "Installation des d√©pendances npm"

# V√©rification et installation de Capacitor
$capacitorInstalled = npm list @capacitor/core 2>$null
if (-not $capacitorInstalled) {
    Invoke-Command "npm install @capacitor/core @capacitor/cli @capacitor/android" "Installation de Capacitor"
} else {
    Write-Success "‚úÖ Capacitor d√©j√† install√©"
}

# V√©rification et installation du plugin SMS
$smsPluginInstalled = npm list @byteowls/capacitor-sms 2>$null
if (-not $smsPluginInstalled) {
    Invoke-Command "npm install @byteowls/capacitor-sms" "Installation du plugin SMS"
} else {
    Write-Success "‚úÖ Plugin SMS d√©j√† install√©"
}

# ===============================================
# PHASE 3: CONFIGURATION AUTOMATIQUE
# ===============================================

Write-Info "‚öôÔ∏è PHASE 3: Configuration automatique"

# Configuration de capacitor.config.ts
$capacitorConfig = @"
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: '$AppId',
  appName: '$AppName',
  webDir: '$WebDir',
  bundledWebRuntime: false,
  server: {
    url: 'https://0bf52ad6-aa5c-422b-b500-e6271dd0b1c5.lovableproject.com?forceHideBadge=true',
    cleartext: true
  },
  plugins: {
    SplashScreen: {
      launchShowDuration: 0
    },
    Sms: {
      androidTargetSdk: 30
    }
  }
};

export default config;
"@

$capacitorConfig | Out-File -FilePath "capacitor.config.ts" -Encoding UTF8
Write-Success "‚úÖ capacitor.config.ts configur√©"
Write-Log "capacitor.config.ts mis √† jour" "CONFIG"

# Configuration de .env (pour le d√©veloppement local)
$envContent = @"
# Gmail SMTP Configuration
GMAIL_USER=$GmailUser
GMAIL_PASS=$GmailPassword

# Emergency Configuration
EMERGENCY_STOP_CODE=$StopCode
TARGET_PHONE_NUMBER=$TargetPhone

# Supabase Configuration (√† compl√©ter manuellement)
VITE_SUPABASE_URL=https://abtflxgmjclxszrzaydz.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFidGZseGdtamNseHN6cnpheWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyOTU1OTEsImV4cCI6MjA3MTg3MTU5MX0.VqQoKenb5M13yvVwjXAY_AX1_OeG-HLQHrKSWPy5h7Q
"@

if (-not (Test-Path ".env")) {
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success "‚úÖ Fichier .env cr√©√©"
    Write-Log ".env cr√©√© avec les secrets Gmail" "CONFIG"
} else {
    Write-Warning "‚ö†Ô∏è Fichier .env existe d√©j√† - non modifi√©"
}

# ===============================================
# PHASE 4: INITIALISATION CAPACITOR
# ===============================================

Write-Info "üîß PHASE 4: Initialisation de Capacitor"

# V√©rification si Capacitor est d√©j√† initialis√©
if (-not (Test-Path "android")) {
    # Initialisation de Capacitor (si pas d√©j√† fait)
    if (-not (Test-Path "capacitor.config.ts")) {
        Invoke-Command "npx cap init $AppName $AppId" "Initialisation de Capacitor"
    }
    
    # Ajout de la plateforme Android
    Invoke-Command "npx cap add android" "Ajout de la plateforme Android"
} else {
    Write-Success "‚úÖ Plateforme Android d√©j√† configur√©e"
}

# ===============================================
# PHASE 5: V√âRIFICATION DES FICHIERS ANDROID NATIFS
# ===============================================

Write-Info "üì± PHASE 5: V√©rification des fichiers Android natifs"

# V√©rification AndroidManifest.xml
$manifestPath = "android/app/src/main/AndroidManifest.xml"
if (Test-Path $manifestPath) {
    $manifestContent = Get-Content $manifestPath -Raw
    if ($manifestContent -match "SEND_SMS" -and $manifestContent -match "ACCESS_FINE_LOCATION") {
        Write-Success "‚úÖ Permissions SMS et localisation trouv√©es dans AndroidManifest.xml"
    } else {
        Write-Warning "‚ö†Ô∏è Permissions manquantes dans AndroidManifest.xml - elles seront ajout√©es au sync"
    }
} else {
    Write-Warning "‚ö†Ô∏è AndroidManifest.xml non trouv√© - sera cr√©√© au sync"
}

# V√©rification des classes Kotlin
$mainActivityPath = "android/app/src/main/java/app/lovable/imane_safety"
if (Test-Path "$mainActivityPath/MainActivity.kt") {
    Write-Success "‚úÖ MainActivity.kt trouv√©"
} else {
    Write-Info "‚ÑπÔ∏è MainActivity.kt sera cr√©√© au sync"
}

if (Test-Path "$mainActivityPath/EmergencySmsPlugin.kt") {
    Write-Success "‚úÖ EmergencySmsPlugin.kt trouv√©"
} else {
    Write-Info "‚ÑπÔ∏è EmergencySmsPlugin.kt sera cr√©√© au sync"
}

# ===============================================
# PHASE 6: BUILD ET SYNCHRONISATION
# ===============================================

Write-Info "üèóÔ∏è PHASE 6: Build et synchronisation"

# Build de l'application React
Invoke-Command "npm run build" "Build de l'application React"

# V√©rification du dossier dist
if (-not (Test-Path $WebDir)) {
    Write-Error "‚ùå Le dossier $WebDir n'a pas √©t√© cr√©√©. Build √©chou√©"
    exit 1
}

Write-Success "‚úÖ Build React termin√© - dossier $WebDir cr√©√©"

# Synchronisation avec Android
Invoke-Command "npx cap copy android" "Copie des fichiers vers Android"
Invoke-Command "npx cap sync android" "Synchronisation avec Android"

# ===============================================
# PHASE 7: FINALISATION ET ANDROID STUDIO
# ===============================================

Write-Info "üéØ PHASE 7: Finalisation"

# V√©rification finale des fichiers Android
$finalAndroidPath = "android"
if (Test-Path $finalAndroidPath) {
    Write-Success "‚úÖ Projet Android g√©n√©r√© avec succ√®s"
    
    # Affichage de la structure g√©n√©r√©e
    Write-Info "üìÅ Structure Android g√©n√©r√©e:"
    Get-ChildItem $finalAndroidPath -Recurse -Directory | Select-Object -First 10 | ForEach-Object {
        Write-Output "  - $($_.FullName.Replace((Get-Location).Path, '.'))"
    }
} else {
    Write-Error "‚ùå Le dossier Android n'a pas √©t√© cr√©√©"
    exit 1
}

# Ouverture d'Android Studio
if ($OpenAndroidStudio) {
    Write-Info "üöÄ Tentative d'ouverture d'Android Studio..."
    
    # Recherche d'Android Studio
    $studioPath = @(
        "${env:ProgramFiles}\Android\Android Studio\bin\studio64.exe",
        "${env:ProgramFiles(x86)}\Android\Android Studio\bin\studio64.exe",
        "${env:LOCALAPPDATA}\Programs\Android Studio\bin\studio64.exe"
    ) | Where-Object { Test-Path $_ } | Select-Object -First 1
    
    if ($studioPath) {
        try {
            Start-Process -FilePath $studioPath -ArgumentList (Get-Location).Path + "\android" -NoNewWindow:$false
            Write-Success "‚úÖ Android Studio lanc√©"
            Write-Log "Android Studio ouvert: $studioPath" "SUCCESS"
        } catch {
            Write-Warning "‚ö†Ô∏è Impossible de lancer Android Studio automatiquement"
            Write-Info "üìÇ Ouvrez manuellement le dossier: $(Get-Location)\android"
        }
    } else {
        Write-Warning "‚ö†Ô∏è Android Studio non trouv√© dans les emplacements habituels"
        Write-Info "üìÇ Ouvrez manuellement le dossier: $(Get-Location)\android"
    }
}

# ===============================================
# PHASE 8: R√âSUM√â ET CHECKLIST
# ===============================================

Write-Success @"

üéâ SCRIPT TERMIN√â AVEC SUCC√àS! üéâ

‚úÖ Environnement v√©rifi√©
‚úÖ D√©pendances install√©es
‚úÖ Configuration Capacitor appliqu√©e
‚úÖ Build React effectu√©
‚úÖ Synchronisation Android termin√©e
‚úÖ Projet Android g√©n√©r√©

"@

Write-Info @"
üìã PROCHAINES √âTAPES DANS ANDROID STUDIO:

1. ‚ö° Ouvrir le projet Android:
   Fichier ‚Üí Ouvrir ‚Üí S√©lectionner le dossier 'android'

2. üîß Attendre la synchronisation Gradle (premi√®re fois = quelques minutes)

3. üîë G√©n√©rer l'APK sign√©:
   Build ‚Üí Generate Signed Bundle/APK
   ‚Üí Choisir APK
   ‚Üí Cr√©er/utiliser un keystore
   ‚Üí Build Release

4. üì± Installer l'APK:
   Activez 'Sources inconnues' sur votre t√©l√©phone
   Transf√©rez et installez l'APK g√©n√©r√©

"@

# G√©n√©ration de la checklist de test
$testChecklist = @"
===============================================
üß™ CHECKLIST DE TESTS APK - ImaneSafety
===============================================

üì± TESTS FONCTIONNELS:
‚òê Application se lance correctement
‚òê Interface responsive sur l'√©cran du t√©l√©phone
‚òê Bouton SOS fonctionne (demande les permissions)
‚òê SMS imm√©diat envoy√© apr√®s SOS
‚òê Email re√ßu via Supabase
‚òê SMS r√©p√©t√©s toutes les 5 minutes
‚òê Code d'arr√™t '$StopCode' fonctionne
‚òê Arr√™t imm√©diat des SMS apr√®s code

üîí TESTS PERMISSIONS:
‚òê Permission SMS demand√©e et accord√©e
‚òê Permission localisation demand√©e et accord√©e
‚òê Application fonctionne si permission refus√©e

üîÑ TESTS ROBUSTESSE:
‚òê Red√©marrage du t√©l√©phone ‚Üí SMS reprennent
‚òê Fermeture forc√©e de l'app ‚Üí SMS continuent
‚òê Mode avion temporaire ‚Üí SMS reprennent
‚òê Batterie faible ‚Üí notifications persistantes

üìß TESTS EMAIL SUPABASE:
‚òê Email re√ßu √†: $GmailUser
‚òê Contenu email correct (localisation, heure)
‚òê Pas d'erreur dans les logs Supabase

üîß TESTS TECHNIQUES:
‚òê Logs Android (adb logcat) propres
‚òê Logs Supabase Edge Functions propres
‚òê Aucun crash ou erreur inattendue

===============================================
"@

$testChecklist | Out-File -FilePath "test-checklist.txt" -Encoding UTF8
Write-Success "‚úÖ Checklist de tests g√©n√©r√©e: test-checklist.txt"

Write-Warning @"
‚ö†Ô∏è NOTES IMPORTANTES:

‚Ä¢ Secrets Gmail d√©j√† configur√©s dans le script
‚Ä¢ V√©rifiez les secrets Supabase dans le dashboard
‚Ä¢ Premier build Android peut prendre 10-15 minutes
‚Ä¢ Activez 'Sources inconnues' pour installer l'APK
‚Ä¢ Testez sur un vrai t√©l√©phone avec carte SIM

"@

Write-Log "Script termin√© avec succ√®s" "END"

Write-Success @"
üöÄ VOTRE APK SERA PR√äT APR√àS LA COMPILATION ANDROID STUDIO! üöÄ

Logs d√©taill√©s disponibles dans: build-log.txt
Checklist de tests dans: test-checklist.txt

"@

# Pause finale
Read-Host "Appuyez sur Entr√©e pour terminer..."